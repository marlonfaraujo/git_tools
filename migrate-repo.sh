#!/bin/bash
# Script to migrate Git repository with full history

# Function to read user input if not passed as parameter
read_required() {
  local var_name=$1
  local prompt=$2
  local value=""
  
  while [ -z "$value" ]; do
    read -p "$prompt " value
    if [ -z "$value" ]; then
      echo "Value cannot be empty. Please try again."
    fi
  done
  
  eval $var_name="'$value'"
}

SOURCE="$1"
DESTINATION="$2"
CHECKOUT="$3"

if [ -z "$SOURCE" ]; then
  read_required SOURCE "Enter the source repository URL:"
fi

if [ -z "$DESTINATION" ]; then
  read_required DESTINATION "Enter the destination repository URL:"
fi

if [ -z "$CHECKOUT" ]; then
  read -p "Do you want to clone the destination repository as working copy? (y/n) [n]: " CHECKOUT
  CHECKOUT=${CHECKOUT:-n}  # padr√£o 'n' se vazio
fi

if [[ "$CHECKOUT" =~ ^[Yy]$ ]]; then
  CHECKOUT=true
else
  CHECKOUT=false
fi

echo "=== Cloning the source repository: $SOURCE ==="
git clone --mirror "$SOURCE"
if [ $? -ne 0 ]; then
  echo "Error cloning source repository."
  exit 1
fi

# Extracts the name of the folder generated by the clone
REPO_DIR=$(basename "$SOURCE")
REPO_DIR="${REPO_DIR%.git}.git"

cd "$REPO_DIR" || { echo "Error entering folder $REPO_DIR"; exit 1; }

echo "=== Setting up remote for new repository: $DESTINATION ==="
git remote set-url origin "$DESTINATION"

echo "=== Sending history, branches, and tags to the destination ==="
git push --mirror
if [ $? -ne 0 ]; then
  echo "Error sending to destination."
  exit 1
fi

echo "=== Migration completed successfully! ==="

if [ "$CHECKOUT" = true ]; then
  echo "=== Cloning destination repository with working tree ==="
  cd .. || exit 1
  git clone "$DESTINATION"
  if [ $? -ne 0 ]; then
    echo "Error cloning working copy from destination."
    exit 1
  fi
  echo "=== Working copy of destination repository is ready! ==="
fi
